/** @about Easy Storage @min_zeppos 2.0 @author: Silver, Zepp Health. @license: MIT */
import{statSync,readSync,closeSync,openAssetsSync,mkdirSync,openSync,writeSync,rmSync,readdirSync,O_RDONLY,O_CREAT,O_WRONLY,O_RDWR,O_TRUNC}from"@zos/fs";import{DEBUG_LOG_LEVEL}from"./constants.js";export function stat(path){try{return statSync({path:path})}catch{return null}}export function openFile(path,flags){try{return openSync({path:path,flag:flags})}catch(error){debugLog(1,`Failed to open file '${path}':`,error);return null}}export function writeFile(filename,data){try{const buffer=str2ab(data);const fd=openSync({path:filename,flag:O_RDWR|O_CREAT|O_TRUNC});writeSync({fd:fd,buffer:buffer});closeSync({fd:fd});debugLog(3,`writeFile success, data written to '${filename}'`)}catch(error){debugLog(1,`writeFile failed for '${filename}':`,error)}}export function readFile(filename){if(!dirOrFileExists(filename)){debugLog(2,`File does not exist: ${filename}`);return""}try{const stat=statSync({path:filename});if(!stat){return""}const fd=openSync({path:filename,flag:O_RDONLY});const buffer=new ArrayBuffer(stat.size);readSync({fd:fd,buffer:buffer});closeSync({fd:fd});return ab2str(buffer)}catch(error){debugLog(2,`Failed to read the file: ${filename}`,error);return""}}export function removeFile(filename){try{rmSync({path:filename});debugLog(3,`File removed successfully: '${filename}'`)}catch(error){debugLog(1,`Failed to remove file '${filename}':`,error)}}export function makeDirectory(directory){try{mkdirSync({path:directory});return true}catch(error){debugLog(1,`Error creating directory '${directory}':`,error);return false}}export function listDirectory(directory){try{return readdirSync({path:directory})}catch(error){debugLog(1,`Error listing directory contents for '${directory}':`,error);return[]}}export function dirOrFileExists(path){return stat(path)!==null}export function saveJson(filename,json){writeFile(filename,JSON.stringify(json))}export function loadJson(filename){try{const val=readFile(filename);return val?JSON.parse(val):{}}catch{return{}}}let str2ab,ab2str;try{if(typeof hmUtil!=="undefined"&&typeof hmUtil.stringToBuffer==="function"){str2ab=hmUtil.stringToBuffer;ab2str=hmUtil.bufferToString}else{str2ab=str2ab_fb;ab2str=ab2str_fb}}catch{str2ab=str2ab_fb;ab2str=ab2str_fb}export{str2ab,ab2str};export{str2ab_fb,ab2str_fb};function str2ab_fb(str){const buf=new ArrayBuffer(str.length*2);const view=new Uint16Array(buf);const len=str.length;let i=0;for(;i<len-3;i+=4){view[i]=str.charCodeAt(i);view[i+1]=str.charCodeAt(i+1);view[i+2]=str.charCodeAt(i+2);view[i+3]=str.charCodeAt(i+3)}for(;i<len;i++){view[i]=str.charCodeAt(i)}return buf}function ab2str_fb(buffer){const view=new Uint16Array(buffer);return String.fromCharCode.apply(null,view)}export function debugLog(level,...params){if(level<=DEBUG_LOG_LEVEL){const trunc_params=params.map(param=>{const MAX_ITEMS=2;if(Array.isArray(param)&&param.length>MAX_ITEMS){return[...param.slice(0,MAX_ITEMS)," ...more"]}return param});console.log("[easy-storage]",...trunc_params)}}export function writeAsset(filename,data){const buffer=str2ab(data);const file=openAssetsSync({path:filename,flag:O_WRONLY|O_CREAT});const result=writeSync({fd:file,buffer:buffer});if(result>=0){debugLog(2,`writeSync success, wrote ${result} bytes`)}else{debugLog(1,"writeSync failed")}closeSync(file)}export function readAsset(filename){const file_info=statSync({path:filename});if(file_info){const fd=openAssetsSync({path:filename,flag:O_RDONLY});if(fd!==undefined){const file_content_buff=new ArrayBuffer(file_info.size);const bytes_read=readSync({fd:fd,buffer:file_content_buff,offset:0,length:file_info.size,position:null});if(bytes_read>0){debugLog(2,`readSync success, read ${bytes_read} bytes`);return ab2str(file_content_buff)}else{debugLog(1,"readSync failed or read 0 bytes")}closeSync(fd)}}return null}
